#!/bin/bash -e

TARGET="${1:-oss}"  # can also be set to 'enterprise'

if [[ "$TARGET" == "oss" ]]; then
  DOCKER_COMPOSE_ARGS=""
  CONJUR_WAIT_COMMAND="conjurctl wait"
elif [[ "$TARGET" == "enterprise" ]]; then
  DOCKER_COMPOSE_ARGS="-f docker-compose.enterprise.yml"
  CONJUR_WAIT_COMMAND="/opt/conjur/evoke/bin/wait_for_conjur"
else
  echo "> '$TARGET' is not a supported target"
  exit 1
fi

CONJUR_ACCOUNT='cucumber'
LOCAL_SECRET_FILE='secret1'

function finish() {
  echo "> Terminating local Conjur environment"

  rm -f $LOCAL_SECRET_FILE
  dockerCompose down -v
}
trap finish EXIT

function main() {
  launchConjur
  configureConjur
  runTerraform
  validateResults
}

function launchConjur() {
  echo "> Launching local Conjur environment"

  dockerCompose pull

  if [[ "$TARGET" == "oss" ]]; then
    export CONJUR_DATA_KEY="$(docker-compose run --rm --no-deps conjur data-key generate)"
  fi

  dockerCompose up -d conjur
  conjurExec $CONJUR_WAIT_COMMAND
}

function configureConjur() {
  echo "> Configuring local Conjur environment"

  export CONJUR_ACCOUNT="$CONJUR_ACCOUNT"
  export CONJUR_AUTHN_LOGIN="admin"

  if [[ "$TARGET" == "oss" ]]; then
    conjurExec conjurctl account create $CONJUR_ACCOUNT
    export CONJUR_AUTHN_API_KEY="$(fetchConjurAdminAPIKey)"
  fi

  if [[ "$TARGET" == "enterprise" ]]; then
    export CONJUR_SSL_CERTIFICATE="$(conjurExec cat /opt/conjur/etc/ssl/conjur.pem)"
  fi

  dockerCompose up -d client

  if [[ "$TARGET" == "enterprise" ]]; then
    clientExec conjur authn login -u admin -p secret
  fi
  clientExec conjur policy load root /test/policy.yml  # policy file mounted in docker-compose
  clientExec conjur list
  clientExec conjur variable values add my/shiny/dbpass testing
}

function runTerraform() {
  echo "> Planning and applying main.tf Terraform manifest"

  export CONJUR_ACCOUNT="$CONJUR_ACCOUNT"
  export CONJUR_AUTHN_LOGIN="admin"
  export CONJUR_AUTHN_API_KEY="$(fetchConjurAdminAPIKey)"
  export TF_LOG=INFO

  if [[ "$TARGET" == "enterprise" ]]; then
    export CONJUR_SSL_CERTIFICATE="$(conjurExec cat /opt/conjur/etc/ssl/conjur.pem)"
  fi

  terraformRun <<EOF
terraform init
terraform plan
terraform apply -auto-approve
EOF
}

function validateResults() {
  local expectedValue="testing"
  local actualValue=$(cat $LOCAL_SECRET_FILE)

  if [[ "$expectedValue" == "$actualValue" ]]; then
    echo "Secret succesfully retrieved!"
  else
    echo "Secret not successfully retrieved."
    echo "Expected '$expectedValue', got '$actualValue'"
    exit 1
  fi
}

function dockerCompose() {
  docker-compose $DOCKER_COMPOSE_ARGS "$@"
}

function conjurExec() {
  dockerCompose exec -T conjur "$@"
}

function clientExec() {
  dockerCompose exec -T client "$@"
}

function terraformRun() {
  dockerCompose run --rm -T --entrypoint sh terraform -es "$"
}

function fetchConjurAdminAPIKey() {
  if [[ "$TARGET" == "oss" ]]; then
    conjurExec conjurctl role retrieve-key $CONJUR_ACCOUNT:user:admin | tr -d '\r'
  elif [[ "$TARGET" == "enterprise" ]]; then
    clientExec conjur user rotate_api_key
  fi
}

main
